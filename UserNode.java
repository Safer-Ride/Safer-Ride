import java.net.*;
import java.io.*;

/**
 * A class that stores every user in the queue with a cost generated by the class 
 *
 */
public class UserNode {
	
	String UserID;
	DummyGPSLocationVar UserRequestStartLocation;
	DummyGPSLocationVar UserRequestDestination;
	boolean isCarpool;
	boolean isEventRequest;
	boolean isAccepted;
	int currentCost;
	int timeCost = 30;
	double userCost = 0;
	double distanceCostWeight = 0.04;
	double notcarpoolCost = 10;
	double carpoolWeight = 1.0;
	double eventWeight = 1.0;
	double notEventCost = 5.0;
	double timeCostWeight = 1.0;

	public UserNode(DummyGPSLocationVar start, DummyGPSLocationVar end) {
		this.UserRequestStartLocation = start;
		this.UserRequestDestination = end;
	}

	public UserNode(String id, DummyGPSLocationVar start, DummyGPSLocationVar end,
			boolean isShared, boolean forEvent, boolean isAcc ) {
		this.UserID = id;
		this.UserRequestStartLocation = start;
		this.UserRequestDestination = end;
		this.isCarpool = isShared;
		this.isEventRequest = forEvent;
		this.isAccepted = isAcc;
	}
	
	//Getters and Setters:
	public String getUserID() {
		return UserID;
	}

	public void setUserID(String userID) {
		UserID = userID;
	}

	public DummyGPSLocationVar getUserRequestStartLocation() {
		return UserRequestStartLocation;
	}

	public void setUserRequestStartLocation(DummyGPSLocationVar userRequestStartLocation) {
		UserRequestStartLocation = userRequestStartLocation;
	}

	public DummyGPSLocationVar getUserRequestDestination() {
		return UserRequestDestination;
	}

	public void setUserRequestDestination(DummyGPSLocationVar userRequestDestination) {
		UserRequestDestination = userRequestDestination;
	}

	public boolean isAccepted() {
		return isAccepted;
	}

	public void setAccepted(boolean isAccepted) {
		this.isAccepted = isAccepted;
	}

	public int getCurrentCost() {
		return currentCost;
	}

	public void setCurrentCost(int currentCost) {
		this.currentCost = currentCost;
	}
	
	public boolean isCarpool() {
		return isCarpool;
	}

	public void setCarpool(boolean isCarpool) {
		this.isCarpool = isCarpool;
	}

	public boolean isEventRequest() {
		return isEventRequest;
	}

	public void setEventRequest(boolean isEventRequest) {
		this.isEventRequest = isEventRequest;
	}
	

	public void setTimeCost(int timeCost) {
		this.timeCost = timeCost;
	}

	public double getUserCost() {
		return userCost;
	}

	public void setUserCost(int userCost) {
		this.userCost = userCost;
	}

	//Generates Costs:
	//Time bound Costs :
	//The time cost is initialized by the ride scheduler when usernode is added to the user requests 
	public int getTimeCost(){
		return timeCost;
	}

	public double userTimeCost() {
		return this.timeCostWeight + this.timeCost;
	}

	//Distance Costs:
	public double distanceFromDriverCost(DummyGPSLocationVar driverLocation) {
		return distanceCostWeight * UserRequestStartLocation.distanceFrom(driverLocation);
	}
	
	//Static Costs: 
	public double isCarpoolCost(boolean isCarpool) {
		if (this.isCarpool == false) {
			return carpoolWeight * notcarpoolCost;
		}
		else 
			return 0.0;
	}
	
	public double isForEventCost(boolean isEvent) {
		if (this.isEventRequest == false) {
			return eventWeight * notEventCost;
		}
		else return 0.0;
	}

	//function that calculated the aggregate of all costs 
	public double userAssignmentCost(DummyGPSLocationVar driverLocation) {
		this.userCost = this.userTimeCost() + this.isCarpoolCost(this.isCarpool) 
		+ this.isForEventCost(this.isEventRequest()) + this.distanceFromDriverCost(driverLocation);
		return this.userCost;
	}



}
